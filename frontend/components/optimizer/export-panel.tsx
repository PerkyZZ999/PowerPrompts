/**
 * Export panel for downloading optimization results.
 */

"use client";

import { useOptimizationStore } from "@/stores/optimization-store";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Download,
  FileJson,
  FileText,
  FileCode,
  CheckCircle2,
} from "lucide-react";
import { useState } from "react";
import { toast } from "@/stores/toast-store";

export function ExportPanel() {
  const completedResult = useOptimizationStore(
    (state) => state.completedResult,
  );
  const iterations = useOptimizationStore((state) => state.iterations);
  const prompt = useOptimizationStore((state) => state.prompt);
  const framework = useOptimizationStore((state) => state.framework);
  const techniques = useOptimizationStore((state) => state.techniques);
  const [exportedFormat, setExportedFormat] = useState<string | null>(null);

  const showSuccess = (format: string) => {
    setExportedFormat(format);
    setTimeout(() => setExportedFormat(null), 2000);
  };

  const exportAsJSON = () => {
    const data = {
      original_prompt: prompt,
      framework,
      techniques,
      iterations: iterations.map((it) => ({
        iteration: it.iteration,
        version_id: it.version_id,
        prompt_version: it.prompt_version,
        techniques: it.techniques,
        metrics: it.metrics,
        evaluation_details: it.evaluation_details,
      })),
      best_version: completedResult?.best_version,
      final_metrics: completedResult?.final_metrics,
      exported_at: new Date().toISOString(),
    };

    const blob = new Blob([JSON.stringify(data, null, 2)], {
      type: "application/json",
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `powerprompts-optimization-${Date.now()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    showSuccess("JSON");
    toast.success(
      "Exported as JSON",
      "Your optimization results have been downloaded",
      3000,
    );
  };

  const exportAsMarkdown = () => {
    const bestIteration = completedResult?.best_version
      ? iterations.find((it) => it.version_id === completedResult.best_version)
      : iterations[iterations.length - 1];

    const markdown = `# PowerPrompts Optimization Report

## Original Prompt
\`\`\`
${prompt}
\`\`\`

## Configuration
- **Framework**: ${framework}
- **Techniques**: ${techniques.join(", ")}
- **Total Iterations**: ${iterations.length}

## Best Version (Iteration #${bestIteration?.iteration || "N/A"})

### Optimized Prompt
\`\`\`
${bestIteration?.prompt_version || "N/A"}
\`\`\`

### Metrics
| Metric | Score |
|--------|-------|
| Aggregate | ${bestIteration?.metrics.aggregate.toFixed(2) || "N/A"} |
| Relevance | ${bestIteration?.metrics.relevance.toFixed(2) || "N/A"} |
| Accuracy | ${bestIteration?.metrics.accuracy.toFixed(2) || "N/A"} |
| Consistency | ${bestIteration?.metrics.consistency.toFixed(2) || "N/A"} |

### Techniques Applied
${bestIteration?.techniques.map((t) => `- ${t}`).join("\n") || "None"}

## Iteration History

${iterations
  .map(
    (it) => `### Iteration ${it.iteration}
- **Score**: ${it.metrics.aggregate.toFixed(2)}
- **Techniques**: ${it.techniques.join(", ")}
`,
  )
  .join("\n")}

---

*Generated by PowerPrompts on ${new Date().toLocaleString()}*
`;

    const blob = new Blob([markdown], { type: "text/markdown" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `powerprompts-report-${Date.now()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    showSuccess("Markdown");
    toast.success(
      "Exported as Markdown",
      "Your formatted report has been downloaded",
      3000,
    );
  };

  const exportAsText = () => {
    const bestIteration = completedResult?.best_version
      ? iterations.find((it) => it.version_id === completedResult.best_version)
      : iterations[iterations.length - 1];

    const text = `POWERPROMPTS OPTIMIZATION REPORT
${"=".repeat(50)}

ORIGINAL PROMPT:
${prompt}

CONFIGURATION:
Framework: ${framework}
Techniques: ${techniques.join(", ")}
Total Iterations: ${iterations.length}

${"=".repeat(50)}
BEST VERSION (Iteration #${bestIteration?.iteration || "N/A"})
${"=".repeat(50)}

OPTIMIZED PROMPT:
${bestIteration?.prompt_version || "N/A"}

METRICS:
- Aggregate Score: ${bestIteration?.metrics.aggregate.toFixed(2) || "N/A"}
- Relevance: ${bestIteration?.metrics.relevance.toFixed(2) || "N/A"}
- Accuracy: ${bestIteration?.metrics.accuracy.toFixed(2) || "N/A"}
- Consistency: ${bestIteration?.metrics.consistency.toFixed(2) || "N/A"}

TECHNIQUES APPLIED:
${bestIteration?.techniques.map((t) => `- ${t}`).join("\n") || "None"}

${"=".repeat(50)}
ITERATION HISTORY
${"=".repeat(50)}

${iterations
  .map(
    (it) => `Iteration ${it.iteration}:
  Score: ${it.metrics.aggregate.toFixed(2)}
  Techniques: ${it.techniques.join(", ")}
`,
  )
  .join("\n")}

${"=".repeat(50)}
Generated by PowerPrompts on ${new Date().toLocaleString()}
`;

    const blob = new Blob([text], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `powerprompts-report-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    showSuccess("Text");
    toast.success(
      "Exported as Text",
      "Your plain text report has been downloaded",
      3000,
    );
  };

  if (!iterations.length) {
    return (
      <Card variant="glass">
        <CardContent className="py-12 text-center">
          <div className="w-16 h-16 mx-auto rounded-full glass-elevated flex items-center justify-center mb-4">
            <Download className="w-8 h-8 text-primary" />
          </div>
          <p className="text-sm text-zinc-400">
            Complete an optimization to export results
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card variant="glass">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Download className="w-5 h-5 text-primary" />
          Export Results
        </CardTitle>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Export Description */}
        <p className="text-sm text-zinc-400">
          Download your optimization results in various formats for
          documentation, sharing, or integration.
        </p>

        {/* Export Buttons */}
        <div className="space-y-3">
          {/* JSON Export */}
          <button
            onClick={exportAsJSON}
            className="w-full p-4 glass-elevated hover:bg-elevated/80 rounded-lg transition-all duration-200 hover:scale-[1.02] active:scale-[0.98] text-left border-2 border-transparent hover:border-primary/30"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center">
                  <FileJson className="w-5 h-5 text-primary" />
                </div>
                <div>
                  <h4 className="text-sm font-semibold text-zinc-200">
                    Export as JSON
                  </h4>
                  <p className="text-xs text-zinc-500">
                    Complete data with all metrics and details
                  </p>
                </div>
              </div>
              {exportedFormat === "JSON" && (
                <CheckCircle2 className="w-5 h-5 text-primary animate-in zoom-in duration-200" />
              )}
            </div>
          </button>

          {/* Markdown Export */}
          <button
            onClick={exportAsMarkdown}
            className="w-full p-4 glass-elevated hover:bg-elevated/80 rounded-lg transition-all duration-200 hover:scale-[1.02] active:scale-[0.98] text-left border-2 border-transparent hover:border-primary/30"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center">
                  <FileCode className="w-5 h-5 text-primary" />
                </div>
                <div>
                  <h4 className="text-sm font-semibold text-zinc-200">
                    Export as Markdown
                  </h4>
                  <p className="text-xs text-zinc-500">
                    Formatted report for documentation
                  </p>
                </div>
              </div>
              {exportedFormat === "Markdown" && (
                <CheckCircle2 className="w-5 h-5 text-primary animate-in zoom-in duration-200" />
              )}
            </div>
          </button>

          {/* Plain Text Export */}
          <button
            onClick={exportAsText}
            className="w-full p-4 glass-elevated hover:bg-elevated/80 rounded-lg transition-all duration-200 hover:scale-[1.02] active:scale-[0.98] text-left border-2 border-transparent hover:border-primary/30"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center">
                  <FileText className="w-5 h-5 text-primary" />
                </div>
                <div>
                  <h4 className="text-sm font-semibold text-zinc-200">
                    Export as Plain Text
                  </h4>
                  <p className="text-xs text-zinc-500">
                    Simple text file for easy reading
                  </p>
                </div>
              </div>
              {exportedFormat === "Text" && (
                <CheckCircle2 className="w-5 h-5 text-primary animate-in zoom-in duration-200" />
              )}
            </div>
          </button>
        </div>

        {/* Export Info */}
        <div className="glass-elevated rounded-lg p-3 space-y-2">
          <div className="flex items-center justify-between text-xs">
            <span className="text-zinc-500">Iterations included:</span>
            <span className="text-primary font-mono font-semibold">
              {iterations.length}
            </span>
          </div>
          <div className="flex items-center justify-between text-xs">
            <span className="text-zinc-500">Best version:</span>
            <span className="text-primary font-mono font-semibold">
              {completedResult?.best_version ||
                iterations[iterations.length - 1]?.version_id ||
                "N/A"}
            </span>
          </div>
          <div className="flex items-center justify-between text-xs">
            <span className="text-zinc-500">Final score:</span>
            <span className="text-primary font-mono font-semibold">
              {completedResult?.final_metrics?.aggregate.toFixed(2) ||
                iterations[iterations.length - 1]?.metrics.aggregate.toFixed(
                  2,
                ) ||
                "N/A"}
            </span>
          </div>
        </div>

        {/* Success Message */}
        {exportedFormat && (
          <div className="flex items-center gap-2 text-sm text-primary bg-primary/10 border border-primary/30 rounded-lg p-3 animate-in fade-in slide-in-from-top-2 duration-200">
            <CheckCircle2 className="w-4 h-4 flex-shrink-0" />
            <span>Successfully exported as {exportedFormat}!</span>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
